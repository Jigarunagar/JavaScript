function
Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Function рдПрдХ reusable block of code рд╣реИ рдЬреЛ рдХрд┐рд╕реА рдХрд╛рдо рдХреЛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд▓рд┐рдЦрд╛ рдЬрд╛рддрд╛ рд╣реИред рдЗрд╕реЗ call рдХрд░рдХреЗ рдмрд╛рд░-рдмрд╛рд░ use рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред

Function Declaration рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм рд╣рдо function name() {} рд▓рд┐рдЦрддреЗ рд╣реИрдВ рддреЛ рдЙрд╕реЗ function declaration рдХрд╣рддреЗ рд╣реИрдВред рдпрд╣ hoisting рдХреЗ рдХрд╛рд░рдг рдкрд╣рд▓реЗ рд╕реЗ available рд╣реЛрддрд╛ рд╣реИред
: function add(a,b){ return a+b; }

Function Expression рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Function рдХреЛ рдХрд┐рд╕реА variable рдореЗрдВ store рдХрд░рдирд╛ function expression рдХрд╣рд▓рд╛рддрд╛ рд╣реИред рдпрд╣ hoisting рдирд╣реАрдВ рд╣реЛрддрд╛ред
: const sub = function(a,b){ return a-b; };

Arrow Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ ES6 рдореЗрдВ рдЖрдпрд╛ shorthand syntax ( ) => { } arrow function рдХрд╣рд▓рд╛рддрд╛ рд╣реИред рдЗрд╕рдореЗрдВ this lexical scope inherit рдХрд░рддрд╛ рд╣реИред
const mul = (a,b) => a*b;

Anonymous Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдРрд╕рд╛ function рдЬрд┐рд╕рдХрд╛ рдирд╛рдо рдирд╣реАрдВ рд╣реЛрддрд╛ рдЙрд╕реЗ anonymous function рдХрд╣рддреЗ рд╣реИрдВред рдЗрд╕реЗ рдЕрдХреНрд╕рд░ callback рдХреЗ рд░реВрдк рдореЗрдВ use рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред
setTimeout(function(){ console.log("Hello"); },1000);

IIFE (Immediately Invoked Function Expression) рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдРрд╕рд╛ function рдЬреЛ define рд╣реЛрддреЗ рд╣реА execute рд╣реЛ рдЬрд╛рдП рдЙрд╕реЗ IIFE рдХрд╣рддреЗ рд╣реИрдВред Syntax: (function(){})();
(function(){ console.log("Run Now"); })();

Callback Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм рдХреЛрдИ function рджреВрд╕рд░реЗ function рдореЗрдВ argument рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдФрд░ рдмрд╛рдж рдореЗрдВ execute рд╣реЛрддрд╛ рд╣реИ, рддреЛ рдЙрд╕реЗ callback рдХрд╣рддреЗ рд╣реИрдВред
function greet(cb){ cb(); } greet(()=>console.log("Hi"));

Recursive Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм рдХреЛрдИ function рдЦреБрдж рдХреЛ рд╣реА call рдХрд░рддрд╛ рд╣реИ рддреЛ рдЙрд╕реЗ recursive function рдХрд╣рддреЗ рд╣реИрдВред рдЗрд╕рдХрд╛ use factorial, fibonacci рдЬреИрд╕реА problems рдореЗрдВ рд╣реЛрддрд╛ рд╣реИред
function fact(n){ return n<=1?1:n*fact(n-1); }

Higher Order Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдРрд╕рд╛ function рдЬреЛ function рдХреЛ argument рд▓реЗ рд╕рдХрддрд╛ рд╣реИ рдпрд╛ function return рдХрд░ рд╕рдХрддрд╛ рд╣реИ рдЙрд╕реЗ higher order function рдХрд╣рддреЗ рд╣реИрдВред
function hof(fn){ return fn(5); } hof(x=>x*2);

First Class Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм function рдХреЛ variable рдореЗрдВ assign рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХреЗ, return рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХреЗ рдпрд╛ argument рдореЗрдВ pass рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХреЗ рддреЛ рдЙрд╕реЗ first class function рдХрд╣рддреЗ рд╣реИрдВред
const say = ()=>"Hello"; const call = say; console.log(call());

Pure Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдРрд╕рд╛ function рдЬрд┐рд╕рдХрд╛ output рд╕рд┐рд░реНрдл рдЙрд╕рдХреЗ input рдкрд░ depend рдХрд░реЗ рдФрд░ side effect рди рдХрд░реЗ, рдЙрд╕реЗ pure function рдХрд╣рддреЗ рд╣реИрдВред
function square(x){ return x*x; }

Default Parameter рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Function рдореЗрдВ parameter рдХреЛ default value рджреЗрдирд╛ default parameter рдХрд╣рд▓рд╛рддрд╛ рд╣реИред рдЬреИрд╕реЗ: function test(x=10){}
function greet(name="User"){ return "Hi "+name; }

Rest Parameter рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм function рдореЗрдВ multiple arguments рдХреЛ array рдХреА рддрд░рд╣ collect рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рддреЛ рдЙрд╕реЗ rest parameter рдХрд╣рддреЗ рд╣реИрдВ (...args)ред
function sum(...nums){ return nums.reduce((a,b)=>a+b); }

Arguments Object рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Function рдореЗрдВ рдкрд╛рд╕ рд╣реБрдП рд╕рднреА arguments arguments object рдореЗрдВ store рд╣реЛрддреЗ рд╣реИрдВред Arrow function рдореЗрдВ рдпрд╣ available рдирд╣реАрдВ рд╣реЛрддрд╛ред
function show(){ console.log(arguments[0]); } show("Hi");

Closures рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ?
ЁЯСЙ рдЬрдм рдХреЛрдИ inner function рдЕрдкрдиреЗ outer function рдХреЗ variables рдХреЛ access рдХрд░рддрд╛ рд╣реИ, рддреЛ рдЙрд╕реЗ closure рдХрд╣рддреЗ рд╣реИрдВред
function outer(){ let x=10; return ()=>x; }

Constructor Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Object рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП function рдХреЛ constructor рдХреА рддрд░рд╣ use рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред Syntax: function Person(){ this.name=""; }
function Person(n){ this.name=n; } let p=new Person("Ram");

Generator Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Generator function рдХреЛ function* рд╕реЗ declare рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдФрд░ рдпрд╣ execution рдХреЛ pause/resume рдХрд░ рд╕рдХрддрд╛ рд╣реИред
function* gen(){ yield 1; yield 2; } console.log([...gen()]);

Async Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Async function рд╣рдореЗрд╢рд╛ promise return рдХрд░рддрд╛ рд╣реИ рдФрд░ рдЗрд╕рдХреЗ рдЕрдВрджрд░ await keyword use рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
async function fetchData(){ return "Data"; }

Hoisting Function рдореЗрдВ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ?
ЁЯСЙ Function declaration hoist рд╣реЛрддреЗ рд╣реИрдВ рдпрд╛рдиреА code рдореЗрдВ рдкрд╣рд▓реЗ use рдХрд┐рдП рдЬрд╛ рд╕рдХрддреЗ рд╣реИрдВред рд▓реЗрдХрд┐рди function expression hoist рдирд╣реАрдВ рд╣реЛрддрд╛ред
test(); function test(){ console.log("Hoisted"); }

Function vs Method рдореЗрдВ рдЕрдВрддрд░?
ЁЯСЙ Function independent code block рд╣реЛрддрд╛ рд╣реИ, рдЬрдмрдХрд┐ method рдХрд┐рд╕реА object рдХрд╛ function рд╣реЛрддрд╛ рд╣реИред
const obj={say(){ return "Hello"; }}; obj.say();


