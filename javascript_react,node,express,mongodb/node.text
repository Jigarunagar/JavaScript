///// function //////
Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Function рдПрдХ reusable block of code рд╣реИ рдЬреЛ рдХрд┐рд╕реА рдХрд╛рдо рдХреЛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд▓рд┐рдЦрд╛ рдЬрд╛рддрд╛ рд╣реИред рдЗрд╕реЗ call рдХрд░рдХреЗ рдмрд╛рд░-рдмрд╛рд░ use рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред

Function Declaration рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм рд╣рдо function name() {} рд▓рд┐рдЦрддреЗ рд╣реИрдВ рддреЛ рдЙрд╕реЗ function declaration рдХрд╣рддреЗ рд╣реИрдВред рдпрд╣ hoisting рдХреЗ рдХрд╛рд░рдг рдкрд╣рд▓реЗ рд╕реЗ available рд╣реЛрддрд╛ рд╣реИред
: function add(a,b){ return a+b; }

Function Expression рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Function рдХреЛ рдХрд┐рд╕реА variable рдореЗрдВ store рдХрд░рдирд╛ function expression рдХрд╣рд▓рд╛рддрд╛ рд╣реИред рдпрд╣ hoisting рдирд╣реАрдВ рд╣реЛрддрд╛ред
: const sub = function(a,b){ return a-b; };

Arrow Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ ES6 рдореЗрдВ рдЖрдпрд╛ shorthand syntax ( ) => { } arrow function рдХрд╣рд▓рд╛рддрд╛ рд╣реИред рдЗрд╕рдореЗрдВ this lexical scope inherit рдХрд░рддрд╛ рд╣реИред
const mul = (a,b) => a*b;

Anonymous Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдРрд╕рд╛ function рдЬрд┐рд╕рдХрд╛ рдирд╛рдо рдирд╣реАрдВ рд╣реЛрддрд╛ рдЙрд╕реЗ anonymous function рдХрд╣рддреЗ рд╣реИрдВред рдЗрд╕реЗ рдЕрдХреНрд╕рд░ callback рдХреЗ рд░реВрдк рдореЗрдВ use рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред
setTimeout(function(){ console.log("Hello"); },1000);

IIFE (Immediately Invoked Function Expression) рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдРрд╕рд╛ function рдЬреЛ define рд╣реЛрддреЗ рд╣реА execute рд╣реЛ рдЬрд╛рдП рдЙрд╕реЗ IIFE рдХрд╣рддреЗ рд╣реИрдВред Syntax: (function(){})();
(function(){ console.log("Run Now"); })();

Callback Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм рдХреЛрдИ function рджреВрд╕рд░реЗ function рдореЗрдВ argument рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд╕ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдФрд░ рдмрд╛рдж рдореЗрдВ execute рд╣реЛрддрд╛ рд╣реИ, рддреЛ рдЙрд╕реЗ callback рдХрд╣рддреЗ рд╣реИрдВред
function greet(cb){ cb(); } greet(()=>console.log("Hi"));

Recursive Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм рдХреЛрдИ function рдЦреБрдж рдХреЛ рд╣реА call рдХрд░рддрд╛ рд╣реИ рддреЛ рдЙрд╕реЗ recursive function рдХрд╣рддреЗ рд╣реИрдВред рдЗрд╕рдХрд╛ use factorial, fibonacci рдЬреИрд╕реА problems рдореЗрдВ рд╣реЛрддрд╛ рд╣реИред
function fact(n){ return n<=1?1:n*fact(n-1); }

Higher Order Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдРрд╕рд╛ function рдЬреЛ function рдХреЛ argument рд▓реЗ рд╕рдХрддрд╛ рд╣реИ рдпрд╛ function return рдХрд░ рд╕рдХрддрд╛ рд╣реИ рдЙрд╕реЗ higher order function рдХрд╣рддреЗ рд╣реИрдВред
function hof(fn){ return fn(5); } hof(x=>x*2);

First Class Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм function рдХреЛ variable рдореЗрдВ assign рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХреЗ, return рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХреЗ рдпрд╛ argument рдореЗрдВ pass рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХреЗ рддреЛ рдЙрд╕реЗ first class function рдХрд╣рддреЗ рд╣реИрдВред
const say = ()=>"Hello"; const call = say; console.log(call());

Pure Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдРрд╕рд╛ function рдЬрд┐рд╕рдХрд╛ output рд╕рд┐рд░реНрдл рдЙрд╕рдХреЗ input рдкрд░ depend рдХрд░реЗ рдФрд░ side effect рди рдХрд░реЗ, рдЙрд╕реЗ pure function рдХрд╣рддреЗ рд╣реИрдВред
function square(x){ return x*x; }

Default Parameter рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Function рдореЗрдВ parameter рдХреЛ default value рджреЗрдирд╛ default parameter рдХрд╣рд▓рд╛рддрд╛ рд╣реИред рдЬреИрд╕реЗ: function test(x=10){}
function greet(name="User"){ return "Hi "+name; }

Rest Parameter рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ рдЬрдм function рдореЗрдВ multiple arguments рдХреЛ array рдХреА рддрд░рд╣ collect рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рддреЛ рдЙрд╕реЗ rest parameter рдХрд╣рддреЗ рд╣реИрдВ (...args)ред
function sum(...nums){ return nums.reduce((a,b)=>a+b); }

Arguments Object рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Function рдореЗрдВ рдкрд╛рд╕ рд╣реБрдП рд╕рднреА arguments arguments object рдореЗрдВ store рд╣реЛрддреЗ рд╣реИрдВред Arrow function рдореЗрдВ рдпрд╣ available рдирд╣реАрдВ рд╣реЛрддрд╛ред
function show(){ console.log(arguments[0]); } show("Hi");

Closures рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ?
ЁЯСЙ рдЬрдм рдХреЛрдИ inner function рдЕрдкрдиреЗ outer function рдХреЗ variables рдХреЛ access рдХрд░рддрд╛ рд╣реИ, рддреЛ рдЙрд╕реЗ closure рдХрд╣рддреЗ рд╣реИрдВред
function outer(){ let x=10; return ()=>x; }

Constructor Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Object рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП function рдХреЛ constructor рдХреА рддрд░рд╣ use рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред Syntax: function Person(){ this.name=""; }
function Person(n){ this.name=n; } let p=new Person("Ram");

Generator Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Generator function рдХреЛ function* рд╕реЗ declare рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ рдФрд░ рдпрд╣ execution рдХреЛ pause/resume рдХрд░ рд╕рдХрддрд╛ рд╣реИред
function* gen(){ yield 1; yield 2; } console.log([...gen()]);

Async Function рдХреНрдпрд╛ рд╣реИ?
ЁЯСЙ Async function рд╣рдореЗрд╢рд╛ promise return рдХрд░рддрд╛ рд╣реИ рдФрд░ рдЗрд╕рдХреЗ рдЕрдВрджрд░ await keyword use рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред
async function fetchData(){ return "Data"; }

Hoisting Function рдореЗрдВ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ?
ЁЯСЙ Function declaration hoist рд╣реЛрддреЗ рд╣реИрдВ рдпрд╛рдиреА code рдореЗрдВ рдкрд╣рд▓реЗ use рдХрд┐рдП рдЬрд╛ рд╕рдХрддреЗ рд╣реИрдВред рд▓реЗрдХрд┐рди function expression hoist рдирд╣реАрдВ рд╣реЛрддрд╛ред
test(); function test(){ console.log("Hoisted"); }

Function vs Method рдореЗрдВ рдЕрдВрддрд░?
ЁЯСЙ Function independent code block рд╣реЛрддрд╛ рд╣реИ, рдЬрдмрдХрд┐ method рдХрд┐рд╕реА object рдХрд╛ function рд╣реЛрддрд╛ рд╣реИред
const obj={say(){ return "Hello"; }}; obj.say();

///// Array Methods /////////

push() тЖТ Add element end рдореЗрдВ
pop() тЖТ Remove element end рд╕реЗ
shift() тЖТ Remove element start рд╕реЗ
unshift() тЖТ Add element start рдореЗрдВ
concat() тЖТ рджреЛ arrays рдЬреЛрдбрд╝рдирд╛
slice() тЖТ copy part of array
splice() тЖТ add/remove elements
forEach() тЖТ loop through array
map() тЖТ рдирдпрд╛ array return рдХрд░рддрд╛ рд╣реИ
filter() тЖТ condition рд╡рд╛рд▓рд╛ рдирдпрд╛ array
reduce() тЖТ single value рдореЗрдВ reduce
find() тЖТ рдкрд╣рд▓рд╛ matching element
includes() тЖТ check element present рд╣реИ рдпрд╛ рдирд╣реАрдВ

//////// Event //////
Event Types (Important for Interview)
Mouse Events тЖТ onclick, ondblclick, onmouseover, onmouseout
Keyboard Events тЖТ onkeydown, onkeyup, onkeypress
Form Events тЖТ onsubmit, onchange, onfocus, onblur
Window Events тЖТ onload, onresize, onscroll

///////////////Loops in JavaScript //////
Loop рдХрд╛ рдорддрд▓рдм рд╣реИ рдмрд╛рд░-рдмрд╛рд░ code рдЪрд▓рд╛рдирд╛ рдЬрдм рддрдХ рдХреЛрдИ condition true рд╣реИред
рдпреЗ repetitive рдХрд╛рдо рдЖрд╕рд╛рди рдФрд░ рдЫреЛрдЯрд╛ рдХрд░ рджреЗрддрд╛ рд╣реИред

for loop
рдЬрдм рд╣рдореЗрдВ рдкрд╣рд▓реЗ рд╕реЗ рдкрддрд╛ рд╣реЛ рдХрд┐ рдХрд┐рддрдиреА рдмрд╛рд░ loop рдЪрд▓рд╛рдирд╛ рд╣реИред

while loop
рдкрд╣рд▓реЗ condition check рдХрд░рддрд╛ рд╣реИ, рдлрд┐рд░ block execute рдХрд░рддрд╛ рд╣реИред

do...while loop
рдХрдо рд╕реЗ рдХрдо рдПрдХ рдмрд╛рд░ рдЬрд░реВрд░ рдЪрд▓реЗрдЧрд╛, рдлрд┐рд░ condition check рдХрд░реЗрдЧрд╛ред

for...of loop
рдкрд╣рд▓реЗ body run рд╣реЛрддреА рд╣реИ, рдлрд┐рд░ condition checkред

for...of loop
for...of directly values рдкрд░ iterate рдХрд░рддрд╛ рд╣реИред

for...in loop
for...in keys рдкрд░ iterate рдХрд░рддрд╛ рд╣реИ, values access рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП obj[key] use рдХрд░рддреЗ рд╣реИрдВред

forEach loop
forEach array рдХреЗ рд╣рд░ element рдкрд░ function apply рдХрд░рддрд╛ рд╣реИред

///////// Throw, and Try...Catch...Finally
throw рдХрд╛ use manually error generate рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реЛрддрд╛ рд╣реИред
try...catch 
Error рдЖрдиреЗ рдкрд░ program рдХреЛ рд░реЛрдХрдиреЗ рдХреЗ рдмрдЬрд╛рдп safe рддрд░реАрдХреЗ рд╕реЗ handle рдХрд░рддрд╛ рд╣реИред
finally
finally block рд╣рдореЗрд╢рд╛ рдЪрд▓реЗрдЧрд╛, рдЪрд╛рд╣реЗ error рдЖрдП рдпрд╛ рдирд╛ рдЖрдПред

/////// Global scope , Function scope , Block scope
Global Scope тЖТ variable рдкреВрд░реЗ program рдореЗрдВ accessibleред
Function Scope тЖТ variable рд╕рд┐рд░реНрдл function рдХреЗ рдЕрдВрджрд░ accessibleред
Block Scope тЖТ { } рдХреЗ рдЕрдВрджрд░ declared variable рдмрд╛рд╣рд░ accessible рдирд╣реАрдВ (let/const)ред

///// map , filter ,forEach
map() тЖТ рд╣рд░ element transform рдХрд░рдХреЗ рдирдпрд╛ array return рдХрд░рддрд╛ рд╣реИред
filter() тЖТ condition рд╡рд╛рд▓реЗ elements рдХрд╛ рдирдпрд╛ array return рдХрд░рддрд╛ рд╣реИред
forEach() тЖТ рд╕рд┐рд░реНрдл loop рдЪрд▓рд╛рддрд╛ рд╣реИ, рдХреЛрдИ рдирдпрд╛ array return рдирд╣реАрдВ рдХрд░рддрд╛ред

////// Async await
async function рд╣рдореЗрд╢рд╛ Promise return рдХрд░рддрд╛ рд╣реИред
рдЗрд╕рдХреЗ рдЕрдВрджрд░ await use рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ тЖТ рдЬреЛ promise resolve рд╣реЛрдиреЗ рддрдХ wait рдХрд░рддрд╛ рд╣реИред
Asynchronous code рдХреЛ рдкрдврд╝рдирд╛ рдФрд░ рд▓рд┐рдЦрдирд╛ рдЖрд╕рд╛рди рдмрдирд╛рддрд╛ рд╣реИред

////// Synchronous Asynchronous //
Synchronous тЖТ Code sequentially рдЪрд▓рддрд╛ рд╣реИ, рд╣рд░ statement рдЕрдЧрд▓реЗ рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рдХрд░рддрд╛ рд╣реИред
Asynchronous тЖТ рдХреБрдЫ рдХрд╛рдо background рдореЗрдВ рд╣реЛрддрд╛ рд╣реИ, рдмрд╛рдХреА code рдмрд┐рдирд╛ рд░реБрдХреЗ рдЪрд▓рддрд╛ рд░рд╣рддрд╛ рд╣реИред
JavaScript single-threaded рд╣реИ, рд▓реЗрдХрд┐рди asynchronous рдХрд╛рдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП event loop рдФрд░ callback queue рдХрд╛ use рдХрд░рддреА рд╣реИред

///// web api
Web APIs (Application Programming Interfaces) browser рджреНрд╡рд╛рд░рд╛ рджрд┐рдП рдЧрдП built-in features рд╣реЛрддреЗ рд╣реИрдВ, рдЬрд┐рдирдХрд╛ use рд╣рдо JavaScript рд╕реЗ рдХрд░рддреЗ рд╣реИрдВред
рдпреЗ APIs рд╣рдореЗрдВ browser рдФрд░ web environment рд╕реЗ interact рдХрд░рдиреЗ рдХреА power рджреЗрддреА рд╣реИрдВред
JavaScript рдЦреБрдж рдореЗрдВ рдмрд╣реБрдд рдЫреЛрдЯрд╛ language рд╣реИ, рд▓реЗрдХрд┐рди Web APIs рдХреА рд╡рдЬрд╣ рд╕реЗ powerful рдмрдирддрд╛ рд╣реИред

//////JSON
JSON рдПрдХ lightweight data format рд╣реИ рдЬреЛ client рдФрд░ server рдХреЗ рдмреАрдЪ data exchange рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред
Format тЖТ key-value pairs (text-based, easy to read/write)ред
Use тЖТ API responses, configuration, data storageред
Methods тЖТ JSON.stringify() (Object тЖТ JSON) рдФрд░ JSON.parse() (JSON тЖТ Object)ред

//// Promise
Modern JS рдореЗрдВ callback рдХрд╛ improved versionред
ЁЯСЙ Promise object represent рдХрд░рддрд╛ рд╣реИ future value (fulfilled, rejected, pending)ред

////React.js///////////////////////////////////////
React.js рдПрдХ JavaScript library рд╣реИ рдЬреЛ UI рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддреА рд╣реИред
рдпреЗ component-based, virtual DOM, рдФрд░ JSX features provide рдХрд░рддрд╛ рд╣реИред
Specially Single Page Applications рдмрдирд╛рдиреЗ рдореЗрдВ рдХрд╛рдо рдЖрддрд╛ рд╣реИред

/////Components//
React рдореЗрдВ components рдЫреЛрдЯреЗ-рдЫреЛрдЯреЗ reusable blocks рд╣реЛрддреЗ рд╣реИрдВ рдЬрд┐рдирд╕реЗ рдкреВрд░рд╛ UI (User Interface) рдмрдирд╛рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

/////Props///
Props рдорддрд▓рдм propertiesред
рдпреЗ component рдХреЛ data pass рдХрд░рдиреЗ рдХрд╛ рддрд░реАрдХрд╛ рд╣реИред

////Virtual DOM///
Virtual DOM тЖТ Real DOM рдХрд╛ lightweight copy рд╣реИред
React рдкрд╣рд▓реЗ Virtual DOM update рдХрд░рддрд╛ рд╣реИ, рдлрд┐рд░ diff рдХрд░рдХреЗ рд╕рд┐рд░реНрдлрд╝ necessary changes Real DOM рдореЗрдВ apply рдХрд░рддрд╛ рд╣реИред
рдЗрд╕рд╕реЗ UI updates fast рдФрд░ efficient рдмрдирддреЗ рд╣реИрдВред

/////React Hooks//
React Hooks рдХреНрдпрд╛ рд╣реИрдВ?
React Hooks рдРрд╕реЗ functions рд╣реИрдВ рдЬреЛ рд╣рдореЗрдВ state рдФрд░ lifecycle features рдХреЛ functional components рдореЗрдВ use рдХрд░рдиреЗ рдХреА рд╕реБрд╡рд┐рдзрд╛ рджреЗрддреЗ рд╣реИрдВред
Earlier class component рдореЗрдВ state & lifecycle рд╣реЛрддреЗ рдереЗ, рд▓реЗрдХрд┐рди hooks рд╕реЗ functional components powerful рдмрди рдЧрдПред

useState Hook рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?
useState component рдХреЗ рдЕрдВрджрд░ state manage рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред

useEffect Hook рдХрд╛ use рдХреНрдпреЛрдВ рдХрд░рддреЗ рд╣реИрдВ?
useEffect side effects handle рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИ рдЬреИрд╕реЗ тАУ API call рдХрд░рдирд╛, data fetch рдХрд░рдирд╛, DOM update рдХрд░рдирд╛ subscription рд▓рдЧрд╛рдирд╛/рд╣рдЯрд╛рдирд╛ред

useContext Hook рдХреНрдпреЛрдВ?
Prop drilling рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдПред
рдЕрдЧрд░ рд╣рдореЗрдВ parent рд╕реЗ child рддрдХ props рдмрд╛рд░-рдмрд╛рд░ pass рдирд╣реАрдВ рдХрд░рдирд╛, рддреЛ рд╣рдо useContext рдХрд╛ use рдХрд░рддреЗ рд╣реИрдВред

useReducer
useReducer рддрдм use рд╣реЛрддрд╛ рд╣реИ рдЬрдм state complex рд╣реЛ рдФрд░ multiple conditions рд╣реЛрдВ (рдЬреИрд╕реЗ form handling рдпрд╛ рдмрдбрд╝реЗ data management)ред

useMemo рдФрд░ useCallback рдХреНрдпреЛрдВ?
useMemo: рдХрд┐рд╕реА calculation рдХреЛ рдмрд╛рд░-рдмрд╛рд░ run рд╣реЛрдиреЗ рд╕реЗ рдмрдЪрд╛рддрд╛ рд╣реИ, рд╕рд┐рд░реНрдл dependencies рдмрджрд▓реЗрдВ рддрдм рд╣реА calculation рдХрд░реЗрдЧрд╛ред (Performance optimization)
useCallback: function рдХреЛ memoize рдХрд░рддрд╛ рд╣реИ рддрд╛рдХрд┐ рд╣рд░ render рдкрд░ рдирдпрд╛ function рдирд╛ рдмрдиреЗред

Custom Hook рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?
рдЬрдм рд╣рдо рджреЛ рдпрд╛ рдЬреНрдпрд╛рджрд╛ components рдореЗрдВ same logic рдмрд╛рд░-рдмрд╛рд░ use рдХрд░ рд░рд╣реЗ рд╣реЛрдВ, рддреЛ рдЙрд╕реЗ рдЕрд▓рдЧ рдирд┐рдХрд╛рд▓рдХрд░ custom hook рдмрдирд╛рддреЗ рд╣реИрдВред

//// folder name
React: Mainly Component-based architecture + Flux/Redux for state management.
Node.js: Mainly MVC or Microservices architecture for backend API and server structure.

MVC (Model-View-Controller)
Use: Web applications, рдЬрд╣рд╛рдБ data рдХреЛ рдЕрд▓рдЧ-рдЕрд▓рдЧ layers рдореЗрдВ organize рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИред
Example: Django (Python), Ruby on Rails (Ruby)

MVVM (Model-View-ViewModel)
Use: Applications with complex UI logic, рдЬреИрд╕реЗ рдХрд┐ desktop рдФрд░ mobile appsред
Example: Angular (рдХрд╛рдлреА рд╣рдж рддрдХ), WPF (Windows)

MVP (Model-View-Presenter)
Use: Applications рдЬрд╣рд╛рдБ UI logic рдХреЛ рдЕрд▓рдЧ рд░рдЦрдирд╛ рд╣реЛ, рдЕрдХреНрд╕рд░ mobile apps рдореЗрдВ рдЗрд╕реНрддреЗрдорд╛рд▓ рд╣реЛрддрд╛ рд╣реИред
Example: Android apps
//// Axios
"Axios рдПрдХ popular JavaScript library рд╣реИ рдЬреЛ HTTP requests (GET, POST, PUT, DELETE)
 рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддреА рд╣реИред рдЗрд╕реЗ React рдореЗрдВ API рд╕реЗ data fetch рдпрд╛ send рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрд╕рд╛рдиреА рд╕реЗ use рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред"

///////// node ///////////////////////////////// 

///////Node.js Architecture
"Node.js рдПрдХ event-driven, non-blocking I/O runtime рд╣реИ рдЬреЛ high-performance рдФрд░
 scalable server applications рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред рдЗрд╕рдХреЗ architecture рдореЗрдВ 
 single-threaded event loop рдФрд░ callback mechanism рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ asynchronous operations handle рд╣реЛрддреЗ рд╣реИрдВред"

//////Node.js Event Loop
"Node.js Event Loop рдПрдХ single-threaded mechanism рд╣реИ рдЬреЛ asynchronous operations 
(I/O, timers, network requests) рдХреЛ efficiently handle рдХрд░рддрд╛ рд╣реИред рдпрд╣ non-blocking architecture рдХрд╛ core рд╣реИ,
 рдЬрд┐рд╕рд╕реЗ Node.js high-performance рдФрд░ scalable applications рдмрдирд╛ рд╕рдХрддрд╛ рд╣реИред"

////// Asynchronous
1я╕ПтГг Node.js Asynchronous:
"Node.js asynchronous рд╣реИ, рдпрд╛рдиреА operations (I/O, file read/write, API calls) non-blocking рддрд░реАрдХреЗ рд╕реЗ рдЪрд▓рддреЗ рд╣реИрдВред
 рдЗрд╕рд╕реЗ server high-performance рдФрд░ scalable рдмрдирддрд╛ рд╣реИред"
2я╕ПтГг Node.js Promises:
"Promises asynchronous operations рдХреЛ handle рдХрд░рдиреЗ рдХрд╛ modern рддрд░реАрдХрд╛ рд╣реИ,
 рдЬреЛ callback рдХреЗ рдмрдЬрд╛рдп success (.then) рдФрд░ error (.catch) manage рдХрд░рддрд╛ рд╣реИред"
3я╕ПтГг Node.js Async/Await:
"async/await Promises рдХреЛ рдЖрд╕рд╛рди рдФрд░ synchronous рдЬреИрд╕рд╛ рджрд┐рдЦрдиреЗ рд╡рд╛рд▓рд╛ рддрд░реАрдХреЗ рд╕реЗ handle рдХрд░рдиреЗ рдХрд╛ syntax рд╣реИред 
рдЗрд╕рд╕реЗ code readable рдФрд░ maintainable рдмрдирддрд╛ рд╣реИред"
4я╕ПтГг Node.js Error Handling:
"Node.js рдореЗрдВ error handling callback, try/catch, рдФрд░ Promise .catch() рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдХреА рдЬрд╛рддреА рд╣реИред 
рдпрд╣ server crashes рд╕реЗ рдмрдЪрд╛рддрд╛ рд╣реИ рдФрд░ errors рдХреЛ proper manage рдХрд░рддрд╛ рд╣реИред"

/////// modules Basics
1я╕ПтГг Node.js Modules:
"Modules Node.js рдореЗрдВ code рдХреЛ рдЕрд▓рдЧ-рдЕрд▓рдЧ files рдореЗрдВ organize рдХрд░рдиреЗ рдХрд╛ рддрд░реАрдХрд╛ рд╣реИрдВред require() рдпрд╛ import рд╕реЗ рдЗрдиреНрд╣реЗрдВ reuse рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред"
2я╕ПтГг Node.js ES Modules:
"ES Modules (import/export) modern JavaScript standard рд╣реИ, рдЬреЛ modules рдХреЛ structured рдФрд░ readable рддрд░реАрдХреЗ рд╕реЗ use рдХрд░рдиреЗ рджреЗрддрд╛ рд╣реИред"
3я╕ПтГг Node.js NPM:
"NPM (Node Package Manager) Node.js packages рдХреЛ install, manage рдФрд░ share рдХрд░рдиреЗ рдХрд╛ tool рд╣реИред"
4я╕ПтГг Node.js package.json:
"package.json project рдХрд╛ metadata file рд╣реИ, рдЬрд┐рд╕рдореЗрдВ dependencies, scripts рдФрд░ project info store рд╣реЛрддреА рд╣реИред"
5я╕ПтГг Node.js NPM Scripts:
"NPM scripts package.json рдореЗрдВ defined commands рд╣реИрдВ, рдЬреИрд╕реЗ start, build, test, рдЬреЛ project automation рдореЗрдВ use рд╣реЛрддреА рд╣реИрдВред"
6я╕ПтГг Node.js Managing Dependencies:
"NPM dependencies install, update рдФрд░ uninstall рдХрд░рдиреЗ рдХрд╛ easy рддрд░реАрдХрд╛ рджреЗрддрд╛ рд╣реИред рдпрд╣ project рдХреЛ maintainable рдмрдирд╛рддрд╛ рд╣реИред"
7я╕ПтГг Node.js Publish a Package:
"NPM рдкрд░ package publish рдХрд░рдиреЗ рд╕реЗ code community рдпрд╛ projects рдореЗрдВ reuse рдХреЗ рд▓рд┐рдП available рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред"

////////// Core modules
1я╕ПтГг Node.js HTTP Module:
"HTTP module Node.js рдореЗрдВ web server рдФрд░ client рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред рдЗрд╕рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ requests рдФрд░ responses handle рдХрд┐рдП рдЬрд╛рддреЗ рд╣реИрдВред"
2я╕ПтГг Node.js HTTPS Module:
"HTTPS module HTTP рдХрд╛ secure version рд╣реИ, рдЬреЛ SSL/TLS encryption рдХреЗ рд╕рд╛рде data transfer рдХрд░рддрд╛ рд╣реИред"
3я╕ПтГг Node.js Path Module:
"Path module file рдФрд░ directory paths рдХреЛ handle рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред рдпрд╣ path join, resolve рдФрд░ normalize рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИред"
4я╕ПтГг Node.js URL Module:
"URL module URLs рдХреЛ parse рдФрд░ format рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред рдпрд╣ query parameters рдФрд░ protocol рдЖрд╕рд╛рдиреА рд╕реЗ manage рдХрд░рддрд╛ рд╣реИред"
5я╕ПтГг Node.js File System (fs) Module:
"FS module files рдФрд░ directories рдХреЛ read, write, update рдФрд░ delete рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред рдпрд╣ synchronous рдФрд░ asynchronous рджреЛрдиреЛрдВ methods provide рдХрд░рддрд╛ рд╣реИред"
6я╕ПтГг Node.js OS Module:
"OS module system information рдЬреИрд╕реЗ CPU, memory, network interfaces рдФрд░ OS type provide рдХрд░рддрд╛ рд╣реИред рдпрд╣ server performance check рдореЗрдВ useful рд╣реИред"

////////// Middleware
"Middleware functions Express.js рдореЗрдВ рд╡реЛ functions рд╣реЛрддреЗ рд╣реИрдВ рдЬреЛ request рдФрд░ response рдХреЗ рдмреАрдЪ execute рд╣реЛрддреЗ рд╣реИрдВред
 рдпреЗ authentication, logging, error handling рдФрд░ data parsing рдЬреИрд╕реА tasks handle рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддреЗ рд╣реИрдВред

////////// Node.js RESTful API
"RESTful API Node.js рдореЗрдВ web services create рдХрд░рдиреЗ рдХрд╛ рддрд░реАрдХрд╛ рд╣реИ
рдЬреЛ HTTP methods (GET, POST, PUT, DELETE) рдХрд╛ use рдХрд░рдХреЗ client-server communication handle рдХрд░рддрд╛ рд╣реИред
рдпрд╣ stateless architecture follow рдХрд░рддрд╛ рд╣реИ рдФрд░ scalable applications рдХреЗ рд▓рд┐рдП ideal рд╣реИред"
///////////What is API Authentication
"API Authentication рд╡рд╣ process рд╣реИ рдЬрд┐рд╕рд╕реЗ server рдпрд╣ verify рдХрд░рддрд╛ рд╣реИ 
рдХрд┐ incoming request authorized user рд╕реЗ рдЖ рд░рд╣реА рд╣реИред рдпрд╣ API keys, tokens (JWT), 
OAuth рдпрд╛ username/password рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред"

///////////// helmet , Multer
1я╕ПтГг Helmet:
"Helmet рдПрдХ Node.js middleware рд╣реИ рдЬреЛ HTTP headers set рдХрд░рдХреЗ application рдХреЛ 
security threats (рдЬреИрд╕реЗ XSS, clickjacking) рд╕реЗ рдмрдЪрд╛рддрд╛ рд╣реИред
 Express.js apps рдореЗрдВ security рдмрдврд╝рд╛рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред"
2я╕ПтГг Multer:
"Multer рдПрдХ Node.js middleware рд╣реИ рдЬреЛ Express.js рдореЗрдВ file uploads handle рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред
 рдпрд╣ multipart/form-data forms рд╕реЗ images, documents рдЖрд╕рд╛рдиреА рд╕реЗ store рдХрд░рддрд╛ рд╣реИред"

////// WebSockets , Socket.IO
1я╕ПтГг Node.js WebSockets:
"WebSockets рдПрдХ protocol рд╣реИ рдЬреЛ client рдФрд░ server рдХреЗ рдмреАрдЪ 
real-time, full-duplex communication allow рдХрд░рддрд╛ рд╣реИред рдпрд╣ HTTP рдХреА рддрд░рд╣ request-response рдирд╣реАрдВ"
2я╕ПтГг Node.js Socket.IO:
"Socket.IO Node.js library рд╣реИ рдЬреЛ WebSockets рдХреЛ рдЖрд╕рд╛рди рдФрд░ reliable рддрд░реАрдХреЗ рд╕реЗ implement рдХрд░рддреА рд╣реИред 
рдпрд╣ real-time communication, events рдФрд░ fallback mechanisms (рдЬреИрд╕реЗ polling) support рдХрд░рддреА рд╣реИред"

//////express///////////////////////////////
Express.js:
"Express.js Node.js рдХрд╛ lightweight web framework рд╣реИ 
рдЬреЛ APIs, routing рдФрд░ middleware handle рдХрд░рдиреЗ рдореЗрдВ рдЖрд╕рд╛рди рдмрдирд╛рддрд╛ рд╣реИред 
рдпрд╣ Node.js applications рдХреЛ fast рдФрд░ structured рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред"

